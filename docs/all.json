{"shell":true,"revision":"1112b82558bedac2ace7e35a273d9ecdb3333ec3","objects":[{"type":"impl","source":"lib/typeform/client_field.ex:7","object_type":"ModuleObject","moduledoc":null,"module":"Elixir.Poison.Encoder.Typeform.ClientField","id":"Poison.Encoder.Typeform.ClientField"},{"type":"impl","source":"lib/typeform/client_form.ex:8","object_type":"ModuleObject","moduledoc":null,"module":"Elixir.Poison.Encoder.Typeform.ClientForm","id":"Poison.Encoder.Typeform.ClientForm"},{"type":"impl","source":"lib/typeform/client_form_response.ex:8","object_type":"ModuleObject","moduledoc":null,"module":"Elixir.Poison.Encoder.Typeform.ClientFormResponse","id":"Poison.Encoder.Typeform.ClientFormResponse"},{"type":"impl","source":"lib/typeform/client_information.ex:8","object_type":"ModuleObject","moduledoc":null,"module":"Elixir.Poison.Encoder.Typeform.ClientInformation","id":"Poison.Encoder.Typeform.ClientInformation"},{"type":"impl","source":"lib/typeform/client_link.ex:8","object_type":"ModuleObject","moduledoc":null,"module":"Elixir.Poison.Encoder.Typeform.ClientLink","id":"Poison.Encoder.Typeform.ClientLink"},{"type":"impl","source":"lib/typeform/client_url.ex:8","object_type":"ModuleObject","moduledoc":null,"module":"Elixir.Poison.Encoder.Typeform.ClientUrl","id":"Poison.Encoder.Typeform.ClientUrl"},{"type":null,"source":"lib/typeform/client.ex:2","object_type":"ModuleObject","moduledoc":"  ** Summary **\n  module to encapsulate the functions wrapped for the TypeForm API - creating and retrieving form data\n","module":"Elixir.Typeform.Client","id":"Typeform.Client"},{"type":null,"source":"lib/typeform/client_field.ex:2","object_type":"ModuleObject","moduledoc":"  ** Summary **\n  module contains the struct for the Client Form Field from the API - used for creating a form fields\n","module":"Elixir.Typeform.ClientField","id":"Typeform.ClientField"},{"type":null,"source":"lib/typeform/client_form.ex:2","object_type":"ModuleObject","moduledoc":"  ** Summary **\n  module contains the struct for the Client Form data from the API - used for creating a form\n","module":"Elixir.Typeform.ClientForm","id":"Typeform.ClientForm"},{"type":null,"source":"lib/typeform/client_form_response.ex:2","object_type":"ModuleObject","moduledoc":"  ** Summary **\n  module contains the struct for the Client Form data from the API - data contained in the API response\n","module":"Elixir.Typeform.ClientFormResponse","id":"Typeform.ClientFormResponse"},{"type":null,"source":"lib/typeform/client_information.ex:2","object_type":"ModuleObject","moduledoc":"  ** Summary **\n  module contains the struct for the Client Information data from the API\n","module":"Elixir.Typeform.ClientInformation","id":"Typeform.ClientInformation"},{"type":null,"source":"lib/typeform/client_link.ex:2","object_type":"ModuleObject","moduledoc":"  ** Summary **\n  module contains the struct for the Client Link data from the API\n","module":"Elixir.Typeform.ClientLink","id":"Typeform.ClientLink"},{"type":null,"source":"lib/typeform/client_url.ex:2","object_type":"ModuleObject","moduledoc":"  ** Summary **\n  module contains the struct for the Client Url data from the API\n","module":"Elixir.Typeform.ClientUrl","id":"Typeform.ClientUrl"},{"type":null,"source":"lib/typeform/config.ex:2","object_type":"ModuleObject","moduledoc":"  ** Summary **\n  module to encapsulate the configuration variables used such as the host and api key\n","module":"Elixir.Typeform.Config","id":"Typeform.Config"},{"type":null,"source":"lib/typeform/dogma_test_ruleset.ex:2","object_type":"ModuleObject","moduledoc":"Ruleset for dogma to ignore windows lineendings that appear in the CI build in Semaphore CI\n","module":"Elixir.Typeform.DogmaTestRuleset","id":"Typeform.DogmaTestRuleset"},{"type":null,"source":"lib/typeform/routes.ex:2","object_type":"ModuleObject","moduledoc":"  ** Summary **\n  module to encapsulate the routes wrapped for the TypeForm API\n","module":"Elixir.Typeform.Routes","id":"Typeform.Routes"},{"type":null,"source":"lib/typeformx.ex:2","object_type":"ModuleObject","moduledoc":"","module":"Elixir.Typeformx","id":"Typeformx"},{"type":"def","source":"lib/typeform/client_field.ex:7","signature":[["atom",[],"Elixir"]],"object_type":"FunctionObject","name":"__impl__","module_id":"Poison.Encoder.Typeform.ClientField","id":"__impl__/1","doc":false,"arity":1},{"type":"def","source":"lib/typeform/client_field.ex:7","signature":[["struct",[],null],["options",[],null]],"object_type":"FunctionObject","name":"encode","module_id":"Poison.Encoder.Typeform.ClientField","id":"encode/2","doc":false,"arity":2},{"type":"def","source":"lib/typeform/client_form.ex:8","signature":[["atom",[],"Elixir"]],"object_type":"FunctionObject","name":"__impl__","module_id":"Poison.Encoder.Typeform.ClientForm","id":"__impl__/1","doc":false,"arity":1},{"type":"def","source":"lib/typeform/client_form.ex:8","signature":[["struct",[],null],["options",[],null]],"object_type":"FunctionObject","name":"encode","module_id":"Poison.Encoder.Typeform.ClientForm","id":"encode/2","doc":false,"arity":2},{"type":"def","source":"lib/typeform/client_form_response.ex:8","signature":[["atom",[],"Elixir"]],"object_type":"FunctionObject","name":"__impl__","module_id":"Poison.Encoder.Typeform.ClientFormResponse","id":"__impl__/1","doc":false,"arity":1},{"type":"def","source":"lib/typeform/client_form_response.ex:8","signature":[["struct",[],null],["options",[],null]],"object_type":"FunctionObject","name":"encode","module_id":"Poison.Encoder.Typeform.ClientFormResponse","id":"encode/2","doc":false,"arity":2},{"type":"def","source":"lib/typeform/client_information.ex:8","signature":[["atom",[],"Elixir"]],"object_type":"FunctionObject","name":"__impl__","module_id":"Poison.Encoder.Typeform.ClientInformation","id":"__impl__/1","doc":false,"arity":1},{"type":"def","source":"lib/typeform/client_information.ex:8","signature":[["struct",[],null],["options",[],null]],"object_type":"FunctionObject","name":"encode","module_id":"Poison.Encoder.Typeform.ClientInformation","id":"encode/2","doc":false,"arity":2},{"type":"def","source":"lib/typeform/client_link.ex:8","signature":[["atom",[],"Elixir"]],"object_type":"FunctionObject","name":"__impl__","module_id":"Poison.Encoder.Typeform.ClientLink","id":"__impl__/1","doc":false,"arity":1},{"type":"def","source":"lib/typeform/client_link.ex:8","signature":[["struct",[],null],["options",[],null]],"object_type":"FunctionObject","name":"encode","module_id":"Poison.Encoder.Typeform.ClientLink","id":"encode/2","doc":false,"arity":2},{"type":"def","source":"lib/typeform/client_url.ex:8","signature":[["atom",[],"Elixir"]],"object_type":"FunctionObject","name":"__impl__","module_id":"Poison.Encoder.Typeform.ClientUrl","id":"__impl__/1","doc":false,"arity":1},{"type":"def","source":"lib/typeform/client_url.ex:8","signature":[["struct",[],null],["options",[],null]],"object_type":"FunctionObject","name":"encode","module_id":"Poison.Encoder.Typeform.ClientUrl","id":"encode/2","doc":false,"arity":2},{"type":"def","source":"lib/typeform/client.ex:23","signature":[["payload",[],null]],"object_type":"FunctionObject","name":"create_form","module_id":"Typeform.Client","id":"create_form/1","doc":"  creates a typeform form from a json payload - expects the input to be a json formatted string\n","arity":1},{"type":"def","source":"lib/typeform/client.ex:7","signature":[["url",[],null],["\\\\",[],[["headers",[],null],[]]],["\\\\",[],[["options",[],null],[]]]],"object_type":"FunctionObject","name":"delete","module_id":"Typeform.Client","id":"delete/3","doc":"Issues a DELETE request to the given url.\n\nReturns `{:ok, response}` if the request is successful, `{:error, reason}`\notherwise.\n\nSee `request/5` for more detailed information.\n","arity":3},{"type":"def","source":"lib/typeform/client.ex:7","signature":[["url",[],null],["\\\\",[],[["headers",[],null],[]]],["\\\\",[],[["options",[],null],[]]]],"object_type":"FunctionObject","name":"delete!","module_id":"Typeform.Client","id":"delete!/3","doc":"Issues a DELETE request to the given url, raising an exception in case of\nfailure.\n\nIf the request does not fail, the response is returned.\n\nSee `request!/5` for more detailed information.\n","arity":3},{"type":"def","source":"lib/typeform/client.ex:45","signature":[["id",[],null]],"object_type":"FunctionObject","name":"form_render_url","module_id":"Typeform.Client","id":"form_render_url/1","doc":"  retrieves the external url to the form by it's id\n","arity":1},{"type":"def","source":"lib/typeform/client.ex:7","signature":[["url",[],null],["\\\\",[],[["headers",[],null],[]]],["\\\\",[],[["options",[],null],[]]]],"object_type":"FunctionObject","name":"get","module_id":"Typeform.Client","id":"get/3","doc":"Issues a GET request to the given url.\n\nReturns `{:ok, response}` if the request is successful, `{:error, reason}`\notherwise.\n\nSee `request/5` for more detailed information.\n","arity":3},{"type":"def","source":"lib/typeform/client.ex:7","signature":[["url",[],null],["\\\\",[],[["headers",[],null],[]]],["\\\\",[],[["options",[],null],[]]]],"object_type":"FunctionObject","name":"get!","module_id":"Typeform.Client","id":"get!/3","doc":"Issues a GET request to the given url, raising an exception in case of\nfailure.\n\nIf the request does not fail, the response is returned.\n\nSee `request!/5` for more detailed information.\n","arity":3},{"type":"def","source":"lib/typeform/client.ex:7","signature":[["url",[],null],["\\\\",[],[["headers",[],null],[]]],["\\\\",[],[["options",[],null],[]]]],"object_type":"FunctionObject","name":"head","module_id":"Typeform.Client","id":"head/3","doc":"Issues a HEAD request to the given url.\n\nReturns `{:ok, response}` if the request is successful, `{:error, reason}`\notherwise.\n\nSee `request/5` for more detailed information.\n","arity":3},{"type":"def","source":"lib/typeform/client.ex:7","signature":[["url",[],null],["\\\\",[],[["headers",[],null],[]]],["\\\\",[],[["options",[],null],[]]]],"object_type":"FunctionObject","name":"head!","module_id":"Typeform.Client","id":"head!/3","doc":"Issues a HEAD request to the given url, raising an exception in case of\nfailure.\n\nIf the request does not fail, the response is returned.\n\nSee `request!/5` for more detailed information.\n","arity":3},{"type":"def","source":"lib/typeform/client.ex:10","signature":[],"object_type":"FunctionObject","name":"information","module_id":"Typeform.Client","id":"information/0","doc":"  retrieves basic api information that helps to confirm that authentication has occurred correctly\n\n  iex> Typeform.Client.information\n","arity":0},{"type":"def","source":"lib/typeform/client.ex:7","signature":[["url",[],null],["\\\\",[],[["headers",[],null],[]]],["\\\\",[],[["options",[],null],[]]]],"object_type":"FunctionObject","name":"options","module_id":"Typeform.Client","id":"options/3","doc":"Issues an OPTIONS request to the given url.\n\nReturns `{:ok, response}` if the request is successful, `{:error, reason}`\notherwise.\n\nSee `request/5` for more detailed information.\n","arity":3},{"type":"def","source":"lib/typeform/client.ex:7","signature":[["url",[],null],["\\\\",[],[["headers",[],null],[]]],["\\\\",[],[["options",[],null],[]]]],"object_type":"FunctionObject","name":"options!","module_id":"Typeform.Client","id":"options!/3","doc":"Issues a OPTIONS request to the given url, raising an exception in case of\nfailure.\n\nIf the request does not fail, the response is returned.\n\nSee `request!/5` for more detailed information.\n","arity":3},{"type":"def","source":"lib/typeform/client.ex:7","signature":[["url",[],null],["body",[],null],["\\\\",[],[["headers",[],null],[]]],["\\\\",[],[["options",[],null],[]]]],"object_type":"FunctionObject","name":"patch","module_id":"Typeform.Client","id":"patch/4","doc":"Issues a PATCH request to the given url.\n\nReturns `{:ok, response}` if the request is successful, `{:error, reason}`\notherwise.\n\nSee `request/5` for more detailed information.\n","arity":4},{"type":"def","source":"lib/typeform/client.ex:7","signature":[["url",[],null],["body",[],null],["\\\\",[],[["headers",[],null],[]]],["\\\\",[],[["options",[],null],[]]]],"object_type":"FunctionObject","name":"patch!","module_id":"Typeform.Client","id":"patch!/4","doc":"Issues a PATCH request to the given url, raising an exception in case of\nfailure.\n\nIf the request does not fail, the response is returned.\n\nSee `request!/5` for more detailed information.\n","arity":4},{"type":"def","source":"lib/typeform/client.ex:7","signature":[["url",[],null],["body",[],null],["\\\\",[],[["headers",[],null],[]]],["\\\\",[],[["options",[],null],[]]]],"object_type":"FunctionObject","name":"post","module_id":"Typeform.Client","id":"post/4","doc":"Issues a POST request to the given url.\n\nReturns `{:ok, response}` if the request is successful, `{:error, reason}`\notherwise.\n\nSee `request/5` for more detailed information.\n","arity":4},{"type":"def","source":"lib/typeform/client.ex:7","signature":[["url",[],null],["body",[],null],["\\\\",[],[["headers",[],null],[]]],["\\\\",[],[["options",[],null],[]]]],"object_type":"FunctionObject","name":"post!","module_id":"Typeform.Client","id":"post!/4","doc":"Issues a POST request to the given url, raising an exception in case of\nfailure.\n\nIf the request does not fail, the response is returned.\n\nSee `request!/5` for more detailed information.\n","arity":4},{"type":"def","source":"lib/typeform/client.ex:7","signature":[["url",[],null],["body",[],null],["\\\\",[],[["headers",[],null],[]]],["\\\\",[],[["options",[],null],[]]]],"object_type":"FunctionObject","name":"put","module_id":"Typeform.Client","id":"put/4","doc":"Issues a PUT request to the given url.\n\nReturns `{:ok, response}` if the request is successful, `{:error, reason}`\notherwise.\n\nSee `request/5` for more detailed information.\n","arity":4},{"type":"def","source":"lib/typeform/client.ex:7","signature":[["url",[],null],["body",[],null],["\\\\",[],[["headers",[],null],[]]],["\\\\",[],[["options",[],null],[]]]],"object_type":"FunctionObject","name":"put!","module_id":"Typeform.Client","id":"put!/4","doc":"Issues a PUT request to the given url, raising an exception in case of\nfailure.\n\nIf the request does not fail, the response is returned.\n\nSee `request!/5` for more detailed information.\n","arity":4},{"type":"def","source":"lib/typeform/client.ex:7","signature":[["method",[],null],["url",[],null],["\\\\",[],[["body",[],null],""]],["\\\\",[],[["headers",[],null],[]]],["\\\\",[],[["options",[],null],[]]]],"object_type":"FunctionObject","name":"request","module_id":"Typeform.Client","id":"request/5","doc":"Issues an HTTP request with the given method to the given url.\n\nThis function is usually used indirectly by `get/3`, `post/4`, `put/4`, etc\n\nArgs:\n  * `method` - HTTP method as an atom (`:get`, `:head`, `:post`, `:put`,\n    `:delete`, etc.)\n  * `url` - target url as a binary string or char list\n  * `body` - request body. See more below\n  * `headers` - HTTP headers as an orddict (e.g., `[{\"Accept\", \"application/json\"}]`)\n  * `options` - Keyword list of options\n\nBody:\n  * binary, char list or an iolist\n  * `{:form, [{K, V}, ...]}` - send a form url encoded\n  * `{:file, \"/path/to/file\"}` - send a file\n\nOptions:\n  * `:timeout` - timeout to establish a connection, in milliseconds. Default is 8000\n  * `:recv_timeout` - timeout used when receiving a connection. Default is 5000\n  * `:stream_to` - a PID to stream the response to\n  * `:proxy` - a proxy to be used for the request; it can by a regular url\n    or a `{Host, Proxy}` tuple\n  * `:proxy_auth` - proxy authentication `{User, Password}` tuple\n  * `:ssl` - SSL options supported by the `ssl` erlang module\n  * `:follow_redirect` - a boolean that causes redirects to be followed\n  * `:max_redirect` - an integer denoting the maximum number of redirects to follow\n\nTimeouts can be an integer or `:infinity`\n\nThis function returns `{:ok, response}` or `{:ok, async_response}` if the\nrequest is successful, `{:error, reason}` otherwise.\n\n## Examples\n\n    request(:post, \"https://my.website.com\", \"{\\\"foo\\\": 3}\", [{\"Accept\", \"application/json\"}])\n\n","arity":5},{"type":"def","source":"lib/typeform/client.ex:7","signature":[["method",[],null],["url",[],null],["\\\\",[],[["body",[],null],""]],["\\\\",[],[["headers",[],null],[]]],["\\\\",[],[["options",[],null],[]]]],"object_type":"FunctionObject","name":"request!","module_id":"Typeform.Client","id":"request!/5","doc":"Issues an HTTP request with the given method to the given url, raising an\nexception in case of failure.\n\n`request!/5` works exactly like `request/5` but it returns just the\nresponse in case of a successful request, raising an exception in case the\nrequest fails.\n","arity":5},{"type":"def","source":"lib/typeform/client.ex:34","signature":[["id",[],null]],"object_type":"FunctionObject","name":"show_form","module_id":"Typeform.Client","id":"show_form/1","doc":"  retrieves a typeform form by it's id\n","arity":1},{"type":"def","source":"lib/typeform/client.ex:7","signature":[],"object_type":"FunctionObject","name":"start","module_id":"Typeform.Client","id":"start/0","doc":"Starts HTTPoison and its dependencies.\n","arity":0},{"type":"def","source":"lib/typeform/client.ex:7","signature":[["target",[],null]],"object_type":"FunctionObject","name":"transformer","module_id":"Typeform.Client","id":"transformer/1","doc":false,"arity":1},{"type":"def","source":"lib/typeform/client_field.ex:24","signature":[["data",[],null]],"object_type":"FunctionObject","name":"build","module_id":"Typeform.ClientField","id":"build/1","doc":"  builds a ClientField struct based on a map that has the correct variables\n","arity":1},{"type":"def","source":"lib/typeform/client_field.ex:13","signature":[["arg1",[],"Elixir"]],"object_type":"FunctionObject","name":"valid_field?","module_id":"Typeform.ClientField","id":"valid_field?/1","doc":"  and one to catch all other cases..\n","arity":1},{"type":"def","source":"lib/typeform/client_link.ex:10","signature":[["data",[],null]],"object_type":"FunctionObject","name":"build","module_id":"Typeform.ClientLink","id":"build/1","doc":"  builds a ClientLink struct based on a map that has the correct variables\n","arity":1},{"type":"def","source":"lib/typeform/client_url.ex:10","signature":[["data",[],null]],"object_type":"FunctionObject","name":"build","module_id":"Typeform.ClientUrl","id":"build/1","doc":"  builds a ClientUrl struct based on a map that has the correct variables\n","arity":1},{"type":"def","source":"lib/typeform/config.ex:18","signature":[],"object_type":"FunctionObject","name":"host","module_id":"Typeform.Config","id":"host/0","doc":"  based on the Mix.env param - retrieve the typeform host\n\n  iex> Typeform.Config.host \"Test\"\n  \"http://test.lvh.me\"\n\n","arity":0},{"type":"def","source":"lib/typeform/config.ex:9","signature":[],"object_type":"FunctionObject","name":"secret","module_id":"Typeform.Config","id":"secret/0","doc":"  based on the Mix.env param - retrieve the typeform api_key/secret\n\n  iex> Typeform.Config.secret \"Test\"\n  \"test_api_key___\"\n\n","arity":0},{"type":"def","source":"lib/typeform/dogma_test_ruleset.ex:7","signature":[],"object_type":"FunctionObject","name":"rules","module_id":"Typeform.DogmaTestRuleset","id":"rules/0","doc":false,"arity":0},{"type":"def","source":"lib/typeform/routes.ex:9","signature":[["atom",[],"Elixir"]],"object_type":"FunctionObject","name":"route","module_id":"Typeform.Routes","id":"route/1","doc":"  retrieve route for creating a typform by passing `:create_form`\n","arity":1},{"type":"def","source":"lib/typeform/routes.ex:27","signature":[["atom",[],"Elixir"],["list",[],"Elixir"]],"object_type":"FunctionObject","name":"route","module_id":"Typeform.Routes","id":"route/2","doc":"  retrieve route for showing a typeform by passing `:show_form` and the `id`\n","arity":2}],"language":"elixir","git_repo_url":"git@bitbucket.org:sforkin/typeformx.git","client_version":"0.4.0","client_name":"inch_ex","branch_name":"master","args":[]}